<!doctype html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>Конвертер магнита (magnet converter)</title>
		<style>
			.btih, .bitprint, .md5, .sha1, .tree_tiger, 
			.ed2k, a#link, .urn, .url, .xurl, durl,
			.hurn, .hurl, .hxurl, .hdurls, .ifmagnet
			{display: none;}
			
			a#link[href*="magnet:?"] ~ #demo{display: none}
			
			a#link[href*="magnet:?"] ~ .ifmagnet{display: initial}
			
			a#link[href*="=urn:btih:"] ~ .btih,
			a#link[href*="=urn:bitprint:"] ~ .bitprint,
			a#link[href*="=urn:sha1:"] ~ .sha1,
			a#link[href*="=urn:tree:tiger:"] ~ .tree_tiger,
			a#link[href*="=urn:ed2k:"] ~ .ed2k,
			a#link[href*="=urn:ed2khash:"] ~ .ed2k,
			a#link[href*="as="] ~ #direct_links > .url,
			a#link[href*="ws="] ~ #direct_links > .url,
			a#link[href*="xs="] ~ #p2p_links > .xurl,
			a#link[href*="xs="] ~ #description_links > .durl
			{
				display: list-item;
				position: relative;
				left: 20px;
			}
			
			
			a#link[href*="x.do="] ~ .hdurls,
			a#link[href*="=urn:"] ~ .hurn,
			a#link[href*="as="] ~ .hurl,
			a#link[href*="ws="] ~ .hurl,
			a#link[href*="xs="] ~ .hxurl{
				display: block;
			}
			
			a#link[href]{
				display: block;
				text-align: center;
				border: solid green 1px;
				padding-top: 1em;
				padding-bottom: 1em;
				border-radius: 1em;
				background-color: #9E9;
				color: black;
				text-decoration: none;
				font-size: xx-large;
			}
			#magnet_mix{width: 100%;}
			#file-size{quotes: "(" ")"};
		</style>
	</head>
	<body>
		<!--noscript-->
		<script>document.write("\x3C!--")</script>
		<p>
		Для того чтобы открыть магнет-ссылку сотрите в адресной строке выше(где адрес этой страницы) часть до #magnet:?... вместе с # и нажмите Enter(на клавиатуре) или ->(рядом с адресной строкой)
		</p>
		<p>
		Например должно остаться:<br>
		<code>magnet:?xt=urn:btih:CYST3G7LBX2J7YYLVTDC5IILUY4TT4HY&xl=2981763794&dn=ruwiki-20141114-pages-meta-current.xml.bz2&tr=http%3A//url2torrent.net%3A6970/announce</code>
		</p>
		
		<!--/noscript-->
		<noscript>!Для правильной работы необходимо включить JavaScript!</noscript>
		<a id="link">Скачать/Download <q id="file-name"></q><q id="file-size"></q> (Полный магнит/Full magnet)</a>
		<script>
			if (window.location.hash.substr(1,8) == "magnet:?"){
				setTimeout(function() {window.location.replace(window.location.hash.substr(1))}, 0);
			}
		</script>
		<p class="ifmagnet">Если клиент не распознал магнит попробуйте магниты ниже.</p>
		<p class="urn">Магниты и ссылки (Magnets and links):</p>
		<a class="torrent_magnet btih">Магнит для Торрента (Magnet for Torrent)</a>
		<a class="dc_magnet bitprint tree_tiger">Магнит для DC++ (Magnet for DC++)</a>
		<a class="shareaza_magnet bitprint tree_tiger sha1 ed2k btih">Магнит для Shareaza (Magnet for Shareaza)</a>
		<a class="ed2k_link ed2k">Ссылка для eMule (Link for eMule)</a>
		<a class="micro_torrent bitprint sha1">Микро-торрент (Micro Torrent)</a>
		<p class="hurl">Прямые ссылки (direct links):</p>
		<div class="hurl" id="direct_links"></div>
		<p class="hxurl">P2P источники (p2p sources):</p>
		<div class="hxurl" id="p2p_links"></div>
		<p class="hdurls">Страницы описания:</p>
		<div class="hdurls" id="description_links"></div>
		
		
		<p class="hurn">Сторонние сервисы:</p>
		
		<a target="_blank" class="virus_check bitprint sha1 md5">Проверка на вирусы (Virus check)</a>
<!--
		<a target="_blank" class="dc_search bitprint tree_tiger">Поиск в сети DirectConnect (DC) (Search in DirectConnect)</a>
		<a target="_blank" class="bitzi_lookup bitprint sha1">Информация на Bitzi (File info from Bitzi)</a>
-->
		<a target="_blank" class="btdigg_search btih">Информация о торренте (Torrent info)</a>
		<a target="_blank" class="torcache_torrent btih">Скачать торрент из Torcache (Download torrent file from Torcache)</a>
		<a target="_blank" class="ed2k-stats ed2k">Статистика ed2k (Ed2k file statistic)</a>
		
		<p>В поле ниже можно скопировать магниты на один и тотже файл из разних p2p клиентов (Например из: <a href="http://shareaza.sourceforge.net/">Shareaza</a>, <a href="http://dcplusplus.sourceforge.net/">DC++</a> и <a href="http://www.utorrent.com/">uTorrent</a>). Также можно скопировать туда и ed2k ссылку на тотже файл (<a href="http://www.emule-project.net/">eMule</a>). По нажатии кнопки "Конвертировать" будет создан единый магнит.</p>
			
		<p>
		<b>Добавить параметр:</b>
		</br><label title="Ссылка на страницу с полным описанием файла." ><input checked="checked" type="radio" name="param" id="description_link" />страница описания (x.do)</label> <a href="http://habrahabr.ru/post/247209/">?</a>
		</br><label title="Прямая ссылка на торрент файл в интернете"><input type="radio" name="param" id="torrent_file_link" />торрент файл (fl)</label>
		</br><label title="Скорость с которой необходимо загружать файл для комфортного онлайн просмотра"><input type="radio" name="param" id="bitrate" />битрейт файла (br)</label> <a href="http://habrahabr.ru/post/247591/">?</a>
		<br /><input style="width:100%" id="add_part"/>
		<br /><button onclick="add_parametr_on_click()">Добавить</button>
		<br /><label><input type="checkbox" id="freebase_be"/>Добавить freebase.be кеш (Add freebase.be cache)</label><a href="http://freebase.be/g2cache.php">?</a><br/>
		
		<button onclick="make_magnet_on_click()">Конвертировать(Convert)</button>   <button onclick="example_on_click()">Вставить пример(Insert example)</button><span id="demo"> &lt;- Нажмите "Вставить пример" а потом "Конвертировать" для демонстрации работы страницы.</span>
		<textarea rows="20" id="magnet_mix"></textarea>
		
		
		<script>
		
			function add_parametr_on_click(){
				var add_part = document.getElementById("add_part")
				var magnet_mix = document.getElementById("magnet_mix") 
				var description_link = document.getElementById("description_link").checked;
				var torrent_file_link = document.getElementById("torrent_file_link").checked;
				var bitrate = document.getElementById("bitrate").checked;
				if (add_part.value.length > 0){
					if (description_link)
						prefix = "x.do=";
					else if(torrent_file_link)
						prefix = "fl=";
					else if(bitrate)
						prefix = "br=";
					
					magnet_mix.value += "\nmagnet:?"+prefix+encodeURIComponent(add_part.value);
					add_part.value = "";
					
				}
			}
			
			function try_decode(data){
				try{
					data = decodeURIComponent(data);
				}catch(e){console.error(e)}
				return data;
			}
			
			function parse_magnet(params, file){
				if (!file) file = {}
				params.replace(/([a-z0-9\.]+)=((([a-z0-9\.]+:)*)([^&]+))&?/gmi,
				function(all, name, data, urn, _, urn_data){
					data = try_decode(data)
					switch (name){
						case "dn":
							file.name = data;
							break;
						case "xl":
							file.size = data;
							break;
						case "br":
							file.bitrate = data;
							break;
						case "tr":
							if (!file.trackers) file.trackers = [];
							file.trackers.push(data);
							break;
						case "x.do":
							if (!file.description_url) file.description_url = [];
							file.description_url.push(data);
							break;
						case "fl":
							if (!file.torrent_file_url) file.torrent_file_url = [];
							file.torrent_file_url.push(data);
							break;
						case "as":
						case "ws":
							if (!file.url) file.url = [];
							file.url.push(data);
							break;
						case "xs":
							if (!file.xurl) file.xurl = [];
							file.xurl.push(data);
							break;
						case "xt":
							if (!file.hash) file.hash = {};
							switch (urn){
								case "urn:sha1:":
									file.hash.sha1 = urn_data;
								break;
								case "urn:ed2k:":
								case "urn:ed2khash:":
									file.hash.ed2k = urn_data;
								break;
								case "urn:aich:":
									file.hash.aich = urn_data;
								break;
								case "urn:btih:":
									if (urn_data.length < 40)
										file.hash.btih = base32_to_hex(urn_data);
									else
										file.hash.btih = urn_data;
								break;
								case "urn:tree:tiger:":
									file.hash.tree_tiger = urn_data;
								break;
								case "urn:bitprint:":
									var sha1_tth = urn_data.split(".");
									if (sha1_tth && sha1_tth.length == 2){
										file.hash.sha1 = sha1_tth[0];
										file.hash.tree_tiger = sha1_tth[1];
										file.hash.bitprint = urn_data;
									}
								break;
							}
						break;
					}
				})
				return file;
			}
			
			function torrent_magnet(file){
				var magnet = ["magnet:?"]
				if (file && file.hash && file.hash.btih) {
					magnet.push("xt=urn:btih:")
					magnet.push(encodeURIComponent(file.hash.btih))
				}else return undefined;
				if (file.name) {
					magnet.push("&dn=")
					magnet.push(encodeURIComponent(file.name))
				}
				if (file.trackers) {
					for (var i=0; i < file.trackers.length; i++){
						magnet.push("&tr=")
						magnet.push(encodeURIComponent(file.trackers[i]))
					}
				}
				if (file.url){
					for (var i=0; i < file.url.length; i++){
						magnet.push("&ws=")
						magnet.push(encodeURIComponent(file.url[i]))
					}
				}
				if (file.torrent_file_url){
					for (var i=0; i < file.torrent_file_url.length; i++){
						magnet.push("&fl=")
						magnet.push(file.torrent_file_url[i])
					}
				}
				return magnet.join("")
			}
			
			function dc_magnet(file){
				var magnet = ["magnet:?"]
				if (file && file.hash && file.hash.tree_tiger) {
					magnet.push("xt=urn:tree:tiger:")
					magnet.push(file.hash.tree_tiger)
				}else return;
				if (file.size) {
					magnet.push("&xl=")
					magnet.push(encodeURIComponent(file.size))
				}
				if (file.name) {
					magnet.push("&dn=")
					magnet.push(encodeURIComponent(file.name))
				}
				if (file.xurl){
					for (var i=0; i < file.xurl.length; i++){
						magnet.push("&xs=")
						magnet.push(file.xurl[i])
					}
				}
				if (file.description_url){
					for (var i=0; i < file.description_url.length; i++){
						magnet.push("&x.do=")
						magnet.push(encodeURIComponent(file.description_url[i]))
					}
				}
				return magnet.join("")
			}
			
			function ed2k_link(file){
				link = ["ed2k://|file"]
				if (file && file.hash && file.name && file.size && file.hash.ed2k) {
					link.push(encodeURIComponent(file.name))
					link.push(file.size)
					link.push(file.hash.ed2k)
					if (file.hash.aich){
						link.push("h=" + file.hash.aich)
					}
					if (file.url){
						for (var i=0; i < file.url.length; i++){
							link.push("s=" + encodeURIComponent(file.url[i]))
						}
					}
					link.push("/")
					return link.join("|")
				}
			}
			
			function full_magnet(file, as){
				var magnet = ["magnet:?"]
				var amp = false
				if (!file) return;
				if (file.hash && file.hash.ed2k){
					magnet.push("xt=urn:ed2k:")
					magnet.push(file.hash.ed2k)
					amp = true;
				}
				if (file.size) {
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("xl=")
					magnet.push(encodeURIComponent(file.size))
				}
				if (file.name) {
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("dn=")
					magnet.push(encodeURIComponent(file.name))
				}
				if (file.hash){
					if (file.hash.aich){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:aich:")
						magnet.push(file.hash.aich)
					}
					if (file.hash.sha1 && file.hash.tree_tiger){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:bitprint:")
						magnet.push(file.hash.sha1)
						magnet.push(".")
						magnet.push(file.hash.tree_tiger)
					}else if(file.hash.sha1){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:sha1:")
						magnet.push(file.hash.sha1)
					}else if(file.hash.tree_tiger){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:tree:tiger:")
						magnet.push(file.hash.tree_tiger)
					}
					if (file.hash.btih){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:btih:")
						magnet.push(file.hash.btih)
					}
				}
				if (file.trackers){
					for (var i=0; i < file.trackers.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("tr=")
						magnet.push(encodeURIComponent(file.trackers[i]))
					}
				}
				if (file.url){
					for (var i=0; i < file.url.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						if (as || !(file.hash && file.hash.btih))
							magnet.push("as=");
						else
							magnet.push("ws=");
						magnet.push(encodeURIComponent(file.url[i]))
					}
				}
				if (file.bitrate){
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("br=")
					magnet.push(encodeURIComponent(file.bitrate))
				}
				if (file.description_url){
					for (var i=0; i < file.description_url.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("x.do=")
						magnet.push(encodeURIComponent(file.description_url[i]))
					}
				}
				if (file.torrent_file_url){
					for (var i=0; i < file.torrent_file_url.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("fl=")
						magnet.push(encodeURIComponent(file.torrent_file_url[i]))
					}
				}
				if (file.xurl){
					for (var i=0; i < file.xurl.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xs=")
						magnet.push(file.xurl[i])
					}
				}
				return magnet.join("")
			}
			
			function set_links(class_name, href, download){
				if (href){
					var links = document.getElementsByClassName(class_name)
					for (var i=0; i < links.length; i++)
					{
						links[i].setAttribute("href", href)
						if (download)
							links[i].setAttribute("download", download)
					}
				}
			}
			
			function parse_text(text){
				var ere = /ed2k:\/\/\|file\|([^\|]+)\|([0-9]+)\|([a-z0-9]+)\|(h=([a-z0-9]+)\|){0,1}\//i
				var mre = /[^\s]*magnet:\?([^\s]+)/gmi
				var hre = /https?:\/\/[\S]*?\/([^\s\/]+)$/gmi
				var dre = /dchub:\/\/[\S]+/gmi
				var file = {}
				text.replace(ere, function(all, name, size, hash, _, aich){
					file.name = try_decode(name);
					file.size = size;
					(file.hash = file.hash || []).ed2k = hash;
					file.hash.aich = aich;
					return "";
				}).replace(mre, function (all, params){
					parse_magnet(params, file);
					return "";
				}).replace(hre, function (url, name){
					(file.url = file.url || []).push(url)
					if (!file.name && name) file.name = name;
					return "";
				}).replace(dre, function (xurl){
					(file.xurl = file.xurl || []).push(xurl)
					return "";
				});
				return file
			}
			
			function make_link(part, hash, part2){
				if (hash) return [part, hash, part2].join("")
			}
			
			function raw_length(encodedURI){
				var count = 0;
				var index = 0;
				for (index = encodedURI.indexOf("%"); index>=0 && (++count) ; index = encodedURI.indexOf("%", index+1));
				return encodedURI.length-count*2
			}
			
			function push_string(string, to_list){
				to_list.push(raw_length(string))
				to_list.push(":")
				to_list.push(string)
			}
			
			function make_micro_torrent(file){
				if (file.name && file.size && file.hash && file.hash.sha1){
					var torrent = ["data:application/x-bittorrent;,d"]
					if (file.trackers && file.trackers.length>0){
						torrent.push("8:announce")
						push_string(file.trackers[0], torrent)
						if (file.trackers.length>1){
							torrent.push("13:announce-listl")
							for (i = 1; file.trackers.length>i; i++){
								var tracker = encodeURIComponent(decodeURIComponent(file.trackers[i]))
								push_string(tracker, torrent)
							}
							torrent.push("e")
						}
					}
					torrent.push("4:infod")
					torrent.push("6:length")
					torrent.push("i")
					torrent.push(file.size)
					torrent.push("e")
					torrent.push("4:name")
					var name = encodeURIComponent(file.name)
					push_string(name, torrent)
					torrent.push("12:piece%20length")
					torrent.push("i")
					torrent.push(file.size < 20000 ? 20000 : file.size)
					torrent.push("e")
					torrent.push("6:pieces")
					var sha1 = file.hash.sha1
					if (sha1.length < 40)
						sha1 = base32_to_hex(sha1);
					sha1 = sha1.replace(/[0-9A-Fa-f]{2}/g,"%$&")
					push_string(sha1, torrent)
					torrent.push("e")
					if (file.url && file.url.length>0){
						torrent.push("8:url-listl")
						for (i = 0; file.url.length>i; i++){
							var url = encodeURIComponent(decodeURIComponent(file.url[i]))
							push_string(url, torrent)
						}
						torrent.push("e")
					}
					torrent.push("e")
					return torrent.join("")
				}
			}
			
				
			function base32_to_hex(base32){
				// http://tools.ietf.org/html/rfc4648
				if (!base32) return "";
				var number = 0
				var bit_pos = 0
				var detector = /[2-7a-z]/gmi
				var hex_str = []
				base32.replace(detector, function(letter){
					var val = parseInt(letter, 36);

					if (val <= 7)
						val += 24;
					else
						val -= 10;
					
					number = ((number << 5) | val) & 255
					bit_pos += 5
					
					for (; bit_pos >= 4;){
						bit_pos -= 4
						var hex_num = (number >> bit_pos) & 15
						hex_str.push(hex_num.toString(16))
					}
				})
				
				return hex_str.join("");
			}
			
			function set_urls(urls, container_id, urls_class){
				if (!urls) return;
				var container = document.getElementById(container_id)
				var new_container = document.createElement(container.tagName)
				for (var i=0; i < urls.length; i++){
					var link =  document.createElement("a")
					var name = document.createTextNode(urls[i])
					link.href = urls[i]
					link.className = urls_class
					link.appendChild(name)
					new_container.appendChild(link)
				}
				container.parentNode.replaceChild(new_container, container)
				new_container.id = container.id
				new_container.className = container.className
				
			}

			function set_file(file){
				document.getElementById("file-name").textContent = file.name
				document.getElementById("file-size").textContent = file.size
				set_links("torrent_magnet", torrent_magnet(file))
				set_links("dc_magnet", dc_magnet(file))
				set_links("shareaza_magnet", full_magnet(file, true))
				set_links("ed2k_link", ed2k_link(file))
				set_links("micro_torrent", make_micro_torrent(file), file.name + ".micro.torrent")
				
				if (file.hash){
					set_links("virus_check", 
						make_link("http://www.virustotal.com/latest-report.html?resource=", base32_to_hex(file.hash.sha1)))
/*					set_links("dc_search", 
								make_link("http://dc.proisk.com?tiger=", file.hash.tree_tiger))
					set_links("bitzi_lookup", 
								make_link("http://bitzi.com/lookup/", 
									file.hash.bitprint 
									|| file.hash.sha1 			
									||	(file.hash.tree_tiger?["tree:tiger:",file.hash.tree_tiger].join(""):false)
									||	(file.hash.ed2k?["ed2k:",file.hash.ed2k].join(""):false)					)
							)
*/					if (file.hash.btih){
						set_links("btdigg_search", 
									make_link("http://btdigg.org/search?info_hash=", file.hash.btih))
						set_links("torcache_torrent", 
									make_link("http://torcache.net/torrent/", file.hash.btih.toUpperCase() , ".torrent"))
					}
					set_links("ed2k-stats", 
						make_link("http://ed2k.shortypower.org/?hash=", file.hash.ed2k))
				}
				set_urls(file.url,"direct_links", "url")
				set_urls(file.xurl,"p2p_links", "xurl")
				set_urls(file.description_url,"description_links", "durls")
			}
			
			var hash = document.location.hash
			var start = hash.indexOf("magnet:?")
			if (start > 0) {
				var magnet = hash.substr(start)
				document.getElementById("magnet_mix").value = magnet
				document.getElementById("link").href = magnet
				file = parse_magnet(magnet.substr(8))
				set_file(file)
			}
			
			function make_magnet_on_click(){
				var magnet_mix = document.getElementById("magnet_mix")
				var file = parse_text(magnet_mix.value)
				var freebase = document.getElementById("freebase_be")
				if (freebase.checked && file.hash && file.hash.sha1){
					if (!file.xurl)
						file.xurl = [];
					file.xurl.push("http://cache.freebase.be/"+file.hash.sha1.toLowerCase());
					freebase.checked = false;
				}
				var magnet = full_magnet(file)
				document.location.hash = magnet
				document.getElementById("link").href = magnet
				magnet_mix.value = magnet
				set_file(file)
			}
			
			function example_on_click(){
				document.getElementById("magnet_mix").value = [
				"magnet:?xt=urn:btih:CYST3G7LBX2J7YYLVTDC5IILUY4TT4HY&xl=2981763794&dn=ruwiki-20141114-pages-meta-current.xml.bz2&tr=http%3A//url2torrent.net%3A6970/announce",
				"ed2k://|file|ruwiki-20141114-pages-meta-current.xml.bz2|2981763794|0218392e98873112284de6913efee0df|/",
				"magnet:?xt=urn:bitprint:U24IYRP3WTLRY5KJH7SACBLFT2LAM62U.JNOANHGPELY63I2OMSPQ3J73AS2P4AWB5MTBJCQ&xl=2981763794&dn=ruwiki-20141114-pages-meta-current.xml.bz2",
				"http://dumps.wikimedia.org/ruwiki/20141114/ruwiki-20141114-pages-meta-current.xml.bz2",
				
				"dchub://allavtovo.ru",
				
				"magnet:?x.do=https://dumps.wikimedia.org/ruwiki/20141114/",
				
				"magnet:?fl=http://torcache.net/torrent/16253D9BEB0DF49FE30BACC62EA10BA63939F0F8.torrent",
				
				"magnet:?xs=http://cache.freebase.be/u24iyrp3wtlry5kjh7sacblft2lam62u"
				
				].join("\n\n")
			}
		</script>
		
		<p>Данная страничка использует информацию переданную ей в url. Таким образом на сайте не хранится никакая иформация о файлах на которые эта страничка может ссылаться.</p>
		
		<p>Вы можете скопировать данную страницу или её чась и разместить у себя на сайте. Также вы можете использовать данные любым другим образом.</p>
		
		<p>
			<a href="" download>Сохранить страничку</a>
		</p>
	</body>
</html>
