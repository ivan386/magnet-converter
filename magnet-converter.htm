<!doctype html>
<html manifest="manifest.appcache">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>Конвертер магнита (magnet converter)</title>
		<link rel="icon" type="image/svg+xml" href="../magnet-uri-logo/magnet-uri-logo.svg" />
		<link rel="apple-touch-icon" sizes="180x180" href="icons/apple-touch-icon.png">
		<link rel="icon" type="image/png" href="icons/favicon-32x32.png" sizes="32x32">
		<link rel="icon" type="image/png" href="icons/favicon-16x16.png" sizes="16x16">
		<link rel="manifest" href="icons/manifest.json">
		<link rel="mask-icon" href="icons/safari-pinned-tab.svg" color="#5bbad5">
		<link rel="shortcut icon" href="icons/favicon.ico">
		<meta name="msapplication-config" content="icons/browserconfig.xml">
		<meta name="theme-color" content="#ffffff">
		<base href="https://ivan386.github.io/magnet-converter/" />
		
		<style>
			.btih, .bitprint, .md5, .sha1, .tree_tiger, 
			.ed2k, a#link, .urn, .url, .xurl, durl,
			.hurn, .hurl, .hxurl, .hdurls, .ifmagnet, .collections, .ipfs, .sha256, .torrent_file_urls, .hturls 
			{display: none;}
			
			a#link ~ [href^="magnet:?"]:before{
				content: url(magnet-uri-logo/magnet-uri-logo-mini.svg);
				position: relative;
				top: 0.2em;
			}
			
			a#link[href*="magnet:?"] ~ #demo,
			a#link[href*="magnet:?"] ~ .info
			{display: none}
			
			a#link[href*="magnet:?"] ~ .ifmagnet{display: initial}
			
			a#link[href*="=urn:"] ~ .hurn > a,
			a#link[href*="=urn:btih:"] ~ .btih,
			a#link[href*="=urn:bitprint:"] ~ .bitprint,
			a#link[href*="=urn:sha1:"] ~ .sha1,
			a#link[href*="=urn:sha256:"] ~ .sha256,
			a#link[href*="=urn:tree:tiger:"] ~ .tree_tiger,
			a#link[href*="=urn:ed2k:"] ~ .ed2k,
			a#link[href*="=urn:ed2khash:"] ~ .ed2k,
			a#link[href*="=urn:ipfs:"] ~ .ipfs,
			a#link[href*="/ipfs/Qm"] ~ .ipfs,
			a#link[href*="/ipfs/zb2rh"] ~ .ipfs,
			a#link[href*="as="] ~ #direct_links > .url,
			a#link[href*="ws="] ~ #direct_links > .url,
			a#link[href*="as="] ~ .url,
			a#link[href*="ws="] ~ .url,
			a#link[href*="tr="] ~ .hturls > a,
			a#link[href*="xs="] ~ #p2p_links > .xurl,
			a#link[href*="x.do="] ~ #description_links > .durl,
			a#link[href*="mt="] ~ #p2p_collections > .collection,
			a#link[href*="fl="] ~ #torrent_file_urls > .torrent_file_url,
			#this_page_links > a
			{
				display: list-item;
				white-space: pre;
				position: relative;
				left: 20px;
			}
			
			.ipfs-link-http-local,
			.ipfs-link-https-local
			{
				display: none;
				position: relative;
				left: 20px;
			}
			
			a#link[href*="x.do="] ~ .hdurls,
			a#link[href*="tr="] ~ .hturls,
			a#link[href*="=urn:"] ~ .hurn,
			a#link[href*="as="] ~ .hurl,
			a#link[href*="ws="] ~ .hurl,
			a#link[href*="xs="] ~ .hxurl,
			a#link[href*="mt="] ~ .collections,
			a#link[href*="fl="] ~ .torrent_file_urls,
			a#link[href*="=urn:ipfs:"] ~ p.ipfs,
			a#link[href*="=/ipfs/Qm"] ~ p.ipfs,
			a#link[href*="=/ipfs/zb2rh"] ~ p.ipfs{
				position: static;
				display: block;
			}
			
			a#link[href]{
				display: block;
				text-align: center;
				border: solid green 1px;
				padding-top: 1em;
				padding-bottom: 1em;
				border-radius: 1em;
				background-color: #9E9;
				color: black;
				text-decoration: none;
				font-size: xx-large;
			}
			#magnet_mix{width: 100%;}
			
			.script > .noscript{
				display: none;
			}
			
			#file-size{quotes: "(" ")";};
			
			
		</style>
		<script>
			function register_magnet_handler()
			{
				navigator.registerProtocolHandler('magnet', window.location.origin + window.location.pathname + '#%s', 'Magnet Converter');
			}
			function register_urn_handler()
			{
				navigator.registerProtocolHandler('urn', window.location.origin + window.location.pathname + '#magnet%3A%3Fxt=%s', 'Magnet Converter');
			}
			
		</script>
	</head>
	<body>
		<!--noscript-->
		
		<p class="noscript">!Для правильной работы необходимо включить JavaScript!</p>
		
		<p class="noscript">
		Для того чтобы открыть магнет-ссылку сотрите в адресной строке выше(где адрес этой страницы) часть до #magnet:?... вместе с # и нажмите Enter(на клавиатуре) или ->(рядом с адресной строкой)
		</p>
		<p class="noscript">
		Например должно остаться:<br>
		<code>magnet:?xt=urn:btih:CYST3G7LBX2J7YYLVTDC5IILUY4TT4HY&xl=2981763794&dn=ruwiki-20141114-pages-meta-current.xml.bz2&tr=http%3A//url2torrent.net%3A6970/announce</code>
		</p>
		
		<!--/noscript-->
		
		<a id="link"><img style="float: right; top: -0.7em; position: relative;" src="https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo.svg"/> Скачать/Download <q id="file-name"></q><q id="file-size"></q> (Полный магнит/Full magnet)</a>
		
		<p class="info">
			Данная страница помогает собрать универсальную <a href="https://ru.wikipedia.org/wiki/Magnet-ссылка">magnet-ссылку(далее магнит)</a>. Скопировать URL на эту страницу со встроенным магнитом. Этот URL можно использовать для передачи в сообщении или публикации на форуме где не поддерживается вставка магнита.
		</p>
		<p class="info">	
			Также на странице вы найдёте магниты подходящие для разных <a href="https://ru.wikipedia.org/wiki/Одноранговая_сеть">одноранговых сетей(Peer to Peer).</a>
		</p>
		
		<p class="ifmagnet">Если клиент не распознал магнит попробуйте магниты ниже.</p>
		<p class="urn">Магниты и ссылки (Magnets and links):</p>
		<a class="torrent_magnet btih">Магнит для Торрента (Magnet for Torrent)</a>
		<a class="dc_magnet bitprint tree_tiger">Магнит для DC++ (Magnet for DC++)</a>
		<a class="shareaza_magnet bitprint tree_tiger sha1 ed2k btih">Магнит для Shareaza (Magnet for Shareaza)</a>
		<a class="ed2k_link ed2k">Ссылка для eMule (Link for eMule)</a>
		<a class="micro_torrent bitprint sha1">Микро-торрент (Micro Torrent)</a>
		<a class="merkle_torrent bitprint sha1 aich">Меркла-торрент (Merkle Torrent)</a>
		<p class="hurl">Прямые ссылки (direct links):</p>
		<div class="hurl" id="direct_links"></div>
		<p class="hxurl">P2P источники (p2p sources):</p>
		<div class="hxurl" id="p2p_links"></div>
		<p class="collections">P2P Коллекции (p2p collections):</p>
		<div class="collections" id="p2p_collections"></div>
		<p class="torrent_file_urls">Прямые ссылки на торрент файл (Direct links to the torrent file):</p>
		<div class="torrent_file_urls" id="torrent_file_urls"></div>
		<p class="hdurls">Страницы описания (description pages):</p>
		<div class="hdurls" id="description_links"></div>
		<p class="hturls">Трекеры (trackers):</p>
		<div class="hturls" id="tracker_links"></div>
		<p class="hurn">Список хешей (URN list):</p>
		<div class="hurn" id="urn_links"></div>
		<p>Ссылки на эту страницу (links to this page):</p>
		<div id="this_page_links">
		<a href="#magnet:?" class="full_link">полная (full link)</a>
		<a href="/#magnet:?" class="short_link">короткая(short link)</a>
		<a href="/#magnet?" class="short_msg_link_private">1. короткая для передачи в сообщении(short link to send in messenger)</a>
		<a href="/magnet?" class="short_msg_link">2. короткая для передачи в сообщении(short link to send in messenger)</a>
		<a href="http://magn.tk#magnet:?" class="shorter_link">короче(shorter link)</a>
		<a href="http://магнит.tk#magnet:?" class="shorter_ru_link">короче но по русски(shorter link on russian domain)</a>
		<a href="http://м.tk#magnet:?" class="shortest_ru_link">коротко по русски(shortest link on russian domain)</a>
		<a href="https://magnet-xt-urn.tk#magnet:?" class="magic_link">магическая ссылка(magic link)</a>
		
		</div>
		
		
		<p class="hurn hurl">Сторонние сервисы (Third-party services):</p>
		
		<a target="_blank" class="virus_check bitprint sha1 md5 sha256">Проверка на вирусы (Virus check)</a>

		<a target="_blank" class="dc_search bitprint tree_tiger">Поиск в сети DirectConnect (DC) (Search in DirectConnect)</a>
<!--		<a target="_blank" class="bitzi_lookup bitprint sha1">Информация на Bitzi (File info from Bitzi)</a>
-->
		<a target="_blank" class="instant_io btih">Загрузить через (Download via) instant.io</a>
		<a target="_blank" class="ikwyd_search btih">Информация о торренте (Torrent info) IKWYD</a>
		<a target="_blank" class="btdigg_search btih">Информация о торренте (Torrent info) BTDIG</a>
		<a target="_blank" class="torcache_torrent btih">Скачать торрент из хранилища торрентов (Download torrent file from torrent cache)</a>
		
		<a target="_blank" class="ed2k-stats ed2k">Статистика ed2k (Ed2k file statistic)</a>
		<a target="_blank" class="hash-archive url ipfs bitprint sha1 md5 sha256">Поиск ссылки на файл/каталог на сайте hash-archive.org (Search link to the file/directory on the site hash-archive.org)</a>
		
		<p class="ipfs">InterPlanetary File System, межпланетная файловая система <a href="https://ipfs.io">[?]</a>:</p>
		<a target="_blank" class="ipfs-link-http-local">Ссылка на файл/каталог на вашем локальном шлюзе IPFS (Link to the file/directory on the local IPFS gateway)</a>
		<a target="_blank" class="ipfs-link-https-local">Ссылка на файл/каталог на вашем локальном шлюзе IPFS (Link to the file/directory on the local IPFS gateway)</a>
		<a target="_blank" class="ipfs-link ipfs">Ссылка на файл/каталог на сайте gateway.ipfs.io (Link to the file/directory on the site gateway.ipfs.io)</a>

		
		<p>В поле ниже можно скопировать <a href="https://ru.wikipedia.org/wiki/Magnet-ссылка">магниты</a> на один и тотже файл из разних p2p клиентов (Например из: <a href="https://ru.wikipedia.org/wiki/Shareaza">Shareaza</a>, <a href="https://ru.wikipedia.org/wiki/Direct_Connect">Direct Connect</a> и <a href="https://ru.wikipedia.org/wiki/BitTorrent_(протокол)">BitTorrent</a>). Также можно скопировать туда и ed2k ссылку на тотже файл (<a href="https://ru.wikipedia.org/wiki/EDonkey2000_(сеть)">EDonkey2000(eMule)</a>). По нажатии кнопки "Конвертировать" будет создан единый магнит.</p>
			
		<b>Добавить параметр:</b>
		<br /><label title="Ссылка на страницу с полным описанием файла." ><input checked="checked" type="radio" name="param" id="description_link" />страница описания (x.do)</label> <a href="http://habrahabr.ru/post/247209/" target="_blank">[?]</a>
		<br /><label title="Прямая ссылка на торрент файл в интернете"><input type="radio" name="param" id="torrent_file_link" />торрент файл (fl)</label>
		<br /><label title="Скорость с которой необходимо загружать файл для комфортного онлайн просмотра"><input type="radio" name="param" id="bitrate" />битрейт файла (br)</label> <a href="http://habrahabr.ru/post/247591/" target="_blank">[?]</a>
		<br /><input style="width:100%" id="add_part"/>
		<br /><button onclick="add_parametr_on_click()">Добавить</button>
		<br /><label><input type="checkbox" id="freebase_be"/>Добавить freebase.be кеш (Add freebase.be cache)</label> <a href="http://freebase.be/g2cache.php"  target="_blank">[?]</a><br/><label><input type="checkbox" id="ipfs_io"/>Добавить ipfs.io Webseed (Add ipfs.io Webseed)</label> <a href="https://ipfs.io" target="_blank">[?]</a><br/>
		
		<button onclick="make_magnet_on_click()">Конвертировать(Convert)</button>   <button onclick="example_on_click()">Вставить пример(Insert example)</button><span id="demo"> &lt;- Нажмите "Вставить пример" а потом "Конвертировать" для демонстрации работы страницы.</span>
		<textarea rows="20" id="magnet_mix"></textarea>
		
		
		<script>
		
			function add_parametr_on_click(){
				var add_part = document.getElementById("add_part")
				var magnet_mix = document.getElementById("magnet_mix") 
				var description_link = document.getElementById("description_link").checked;
				var torrent_file_link = document.getElementById("torrent_file_link").checked;
				var bitrate = document.getElementById("bitrate").checked;
				if (add_part.value.length > 0){
					if (description_link)
						prefix = "x.do=";
					else if(torrent_file_link)
						prefix = "fl=";
					else if(bitrate)
						prefix = "br=";
					
					magnet_mix.value += "\nmagnet:?"+prefix+encodeURIComponent(add_part.value);
					add_part.value = "";
					
				}
			}
			
			function try_decode(data){
				try{
					data = decodeURIComponent(data);
				}catch(e){console.error(e)}
				return data;
			}
			
			function detect_ipfs_hash(url, file)
			{
				if (file.hash && file.hash.ipfs) return;
				url.replace(/\/ipfs\/((zb2rh|Qm)[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{44})\/?$/,
				 function(all, hash){
					if (!file.hash) file.hash = {};
					file.hash.ipfs = hash;
				 });
				return;
			}
			
			function set_sha1(sha1, file)
			{
				if (sha1.length > 40)
					sha1 = sha1.substr(0,40);
					
				file.hash.sha1 = sha1;
				if (!file.hash.aich && file.size && file.size <= 184320)
				{
					if (sha1.length == 40)
						file.hash.aich = hex_to_base32(sha1);
					else
						file.hash.aich = sha1;
				}
					
			}
			
			function parse_urn(urn_name, urn_data, file)
			{
				if (!file.hash) file.hash = {};
				
				switch (urn_name){
					case "urn:sha1:":
						set_sha1(urn_data, file);
					break;
					case "urn:sha256:":
						if (urn_data.length > 64)
							file.hash.sha256 = urn_data.substr(0,64);
						else
							file.hash.sha256 = urn_data;
							
						/*
							z - base58 prefix https://github.com/multiformats/multibase/blob/master/multibase.csv
							
							0x01 - varint CID version https://github.com/ipld/cid
							0x55 - varint raw binary https://github.com/multiformats/multicodec/blob/master/table.csv
							0x12 - varint sha256 https://github.com/multiformats/multihash/blob/master/hashtable.csv
							0x20 - varint digest size in bytes https://github.com/multiformats/unsigned-varint
						*/
						
						if (!file.hash.ipfs && file.size && file.size <= 256 * 1024)
							file.hash.ipfs = "z" + hex_to_base58( "01551220" + urn_data );
							
					break;
					case "urn:md5:":
						if (urn_data.length > 32)
							file.hash.md5 = urn_data.substr(0,32);
						else
							file.hash.md5 = urn_data;
					break;
					case "urn:md4:":
						file.hash.md4 = urn_data;
						if (!file.hash.ed2k && file.size && file.size < 9728000)
							file.hash.ed2k = urn_data;
					break;
					case "urn:ed2k:":
					case "urn:ed2khash:":
						file.hash.ed2k = urn_data;
					break;
					case "urn:aich:":
						file.hash.aich = urn_data;
						if (!file.hash.sha1 && file.size && file.size <= 184320)
							set_sha1(urn_data, file);
					break;
					case "urn:btih:":
						if (urn_data.length < 40)
							file.hash.btih = base32_to_hex(urn_data);
						else if (urn_data.length > 40)
							file.hash.btih = urn_data.substr(0, 40);
						else
							file.hash.btih = urn_data;
					break;
					case "urn:ipfs:":
						file.hash.ipfs = urn_data;
					break;
					case "urn:tree:tiger:":
					case "urn:tree:tiger/:":
					case "urn:ttroot:":
						file.hash.tree_tiger = urn_data;
					break;
					case "urn:bitprint:":
						var sha1_tth = urn_data.split(".");
						if (sha1_tth && sha1_tth.length == 2){
							set_sha1(sha1_tth[0], file);
							file.hash.tree_tiger = sha1_tth[1];
							file.hash.bitprint = urn_data;
						}
					break;
					case "urn:sha384:":
						if (urn_data.length > 96)
							urn_data = urn_data.substr(0, 96);
					case "urn:sha512:":
						if (urn_data.length > 128)
							urn_data = urn_data.substr(0, 128);
					default:
						if (!file.urns) file.urns = [];
						file.urns.push(urn_name+urn_data);
				}
			}
			
			function parse_magnet(params, file){
				if (!file) file = {}
				params.replace(/([a-z0-9\.]+)=((([a-z0-9\/\.]+:)*)([^&]+))&?/gmi,
				function(all, name, data, urn, _, urn_data){
					data = try_decode(data)
					switch (name){
						case "dn":
							file.name = data;
							break;
						case "sz":
						case "fs":
/* 
https://sourceforge.net/p/shareaza/code/HEAD/tree/trunk/shareaza/ShareazaURL.cpp#671
*/
						case "xl":
							file.size = data;
							break;
						case "br":
							file.bitrate = data;
							break;
						case "tr":
							if (!file.trackers) file.trackers = [];
							file.trackers.push(data);
							break;
						case "x.pe": 
/* 
https://github.com/arvidn/libtorrent/blob/cdf066c4e152d83e6fe0facedb3c437b8b4a21d1/src/magnet_uri.cpp#L238 
*/						
						if (!file.peers) file.peers = [];
							file.peers.push(data);
							break;
						case "bn":
/* 
https://sourceforge.net/p/shareaza/code/HEAD/tree/trunk/shareaza/ShareazaURL.cpp#683 
*/
						case "dht":
/* 
https://github.com/arvidn/libtorrent/blob/cdf066c4e152d83e6fe0facedb3c437b8b4a21d1/src/magnet_uri.cpp#L254 
*/		
							if (!file.dht) file.dht = [];
							file.dht.push(data);
							break;
						case "mt":	
							file.collection = file.collection || [];
							file.collection.push(data);
							break;
						case "x.do":
							if (!file.description_url) file.description_url = [];
							file.description_url.push(data);
							break;
						case "fl":
							if (!file.torrent_file_url) file.torrent_file_url = [];
							file.torrent_file_url.push(data);
							break;
						case "as":
						case "ws":
							if (!file.url) file.url = [];
							file.url.push(data);
							detect_ipfs_hash(data, file);
							break;
						case "xs":
							if (!file.xurl) file.xurl = [];
							file.xurl.push(data);
							detect_ipfs_hash(data, file);
							break;
						case "xt":
							parse_urn(urn, urn_data, file)
							break;
						case "x.ed2k.p":
							(file.hash_list = file.hash_list || {}).ed2k = data.split(":");
							break;
					}
				})
				return file;
			}
			
			function torrent_magnet(file, webtorrent){
				var magnet = ["magnet:?"]
				if (file && file.hash && file.hash.btih) {
					magnet.push("xt=urn:btih:")
					magnet.push(encodeURIComponent(file.hash.btih))
				}else return undefined;
				if (file.name) {
					magnet.push("&dn=")
					magnet.push(encodeURIComponent(file.name))
				}
				if (file.trackers) {
					for (var i=0; i < file.trackers.length; i++){
						magnet.push("&tr=")
						magnet.push(encodeURIComponent(file.trackers[i]))
					}
				}
				if (file.url){
					for (var i=0; i < file.url.length; i++){
						magnet.push("&ws=")
						magnet.push(encodeURIComponent(file.url[i]))
					}
				}
				if (file.xurl){
					file.xurl.map(
						function (xurl){
							var matches = (/btc\:\/\/([^\/]+)\/[a-z0-9]*\/[a-z0-9]+\//gmi).exec(xurl)
							if (matches)
								magnet.push("&x.pe=" + matches[1]);
						}
					)
				}
				if (file.peers){
					for (var i=0; i < file.peers.length; i++){
						magnet.push("&x.pe=" + file.peers[i]);
					}
				}
				if (file.dht){
					for (var i=0; i < file.dht.length; i++){
						magnet.push("&dht=" + file.dht[i]);
					}
				}
				if (file.torrent_file_url){
					for (var i=0; i < file.torrent_file_url.length; i++){
						if (webtorrent)
							magnet.push("&xs=");
						else
							magnet.push("&fl=");
						magnet.push(file.torrent_file_url[i])
					}
				}
				return magnet.join("")
			}
			
			function append_xurls(magnet, amp, file){
				var dchub = [];
				if (file.xurl){
					for (var i=0; i < file.xurl.length; i++){
						if (file.xurl[i].indexOf("dchub:")==0)
							dchub.push(file.xurl[i]);
						else{
							if (amp) magnet.push("&"); else amp = true;
							magnet.push("xs=");
							magnet.push(file.xurl[i]);
						}
					}
				}
				if (dchub.length > 0){
					for (var i=0; i < dchub.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xs=")
						magnet.push(dchub[i])
					}
				}
			}
			
			function dc_magnet(file){
				var magnet = ["magnet:?"]
				if (file && file.hash && file.hash.tree_tiger) {
					magnet.push("xt=urn:tree:tiger:")
					magnet.push(file.hash.tree_tiger)
				}else return;
				if (file.size) {
					magnet.push("&xl=")
					magnet.push(encodeURIComponent(file.size))
				}
				if (file.name) {
					magnet.push("&dn=")
					magnet.push(encodeURIComponent(file.name))
				}
				if (file.description_url){
					for (var i=0; i < file.description_url.length; i++){
						magnet.push("&x.do=")
						magnet.push(encodeURIComponent(file.description_url[i]))
					}
				}
				
				append_xurls(magnet, true, file);
				
				return magnet.join("")
			}
			
			function ed2k_link(file){
				var link = ["ed2k://|file"];
				
				if (file && file.hash && file.name && file.size && file.hash.ed2k) {
					link.push(encodeURIComponent(file.name))
					link.push(file.size)
					link.push(file.hash.ed2k)
					if (file.hash.aich)
						link.push("h=" + file.hash.aich);
					
					if (file.hash_list && file.hash_list.ed2k)
						link.push("p=" + file.hash_list.ed2k.join(":"));
					
					
					if (file.url)
						for (var i=0; i < file.url.length; i++)
							link.push("s=" + encodeURIComponent(file.url[i]));
						
					
					
					if (file.collection)
						for (var i=0; i < file.collection.length; i++)
							link.push("f=" + encodeURIComponent(file.collection[i]));
						
					
					
					if (file.xurl){
						var sources = [];
						file.xurl.map(
							function (xurl){
								var matches = (/ed2kftp\:\/\/([^\/]+)\/[a-z0-9]+\/[0-9]+\//gmi).exec(xurl)
								if (matches)
									sources.push(matches[1]);
							}
						)
						if ( sources.length > 0 )
							link.push("/|sources," + sources.join(","))
					}
					
					link.push("/")
					return link.join("|")
				}
			}
			
			function full_magnet(file, shareaza){
				var magnet = ["magnet:?"]
				var amp = false
				if (!file) return;
				if (file.hash){
					if (file.hash.btih){
						magnet.push("xt=urn:btih:")
						magnet.push(file.hash.btih)
						amp = true;
					}
					if (file.hash.sha1 && file.hash.tree_tiger){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:bitprint:")
						if (file.hash.sha1.length == 40)
							magnet.push(hex_to_base32(file.hash.sha1));
						else
							magnet.push(file.hash.sha1);
						magnet.push(".")
						magnet.push(file.hash.tree_tiger)
					}else if(file.hash.sha1){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:sha1:")
						magnet.push(file.hash.sha1)
					}else if(file.hash.tree_tiger){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:tree:tiger:")
						magnet.push(file.hash.tree_tiger)
					}
					if (file.hash.ed2k){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:ed2k:")
						magnet.push(file.hash.ed2k)
					}
				}
				if (file.size) {
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("xl=")
					magnet.push(encodeURIComponent(file.size))
				}
				if (file.name) {
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("dn=")
					magnet.push(encodeURIComponent(file.name))
				}
				if (file.hash){
					if (file.hash.aich){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:aich:")
						magnet.push(file.hash.aich)
					}
					if (file.hash.sha256){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:sha256:")
						magnet.push(file.hash.sha256)
					}
					if (file.hash.ipfs){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:ipfs:")
						magnet.push(file.hash.ipfs)
					}
					if (file.hash.md4){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:md4:");
						magnet.push(file.hash.md4);
					}
					if (file.hash.md5){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=urn:md5:");
						magnet.push(file.hash.md5);
					}
				}
				if (file.urns){
					file.urns.map((urn)=>{
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("xt=")
						magnet.push(urn)
						return urn;
					})
				}
				if (file.trackers){
					for (var i=0; i < file.trackers.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("tr=")
						magnet.push(encodeURIComponent(file.trackers[i]))
					}
				}
				if (file.url){
					for (var i=0; i < file.url.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						if (shareaza || !(file.hash && file.hash.btih))
							magnet.push("as=");
						else
							magnet.push("ws=");
						magnet.push(encodeURIComponent(file.url[i]))
					}
				}
				if (file.bitrate){
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("br=")
					magnet.push(encodeURIComponent(file.bitrate))
				}
				if (file.description_url){
					for (var i=0; i < file.description_url.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("x.do=")
						magnet.push(encodeURIComponent(file.description_url[i]))
					}
				}
				if (file.torrent_file_url){
					for (var i=0; i < file.torrent_file_url.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("fl=")
						magnet.push(encodeURIComponent(file.torrent_file_url[i]))
					}
				}
				if (file.peers){
					for (var i=0; i < file.peers.length; i++){
						if (shareaza)
							magnet.push("&xs=btc://" + file.peers[i] + "//" + file.hash.btih );
						else
							magnet.push("&x.pe=" + file.peers[i]);
					}
				}
				if (file.dht){
					for (var i=0; i < file.dht.length; i++){
						if (shareaza)
							magnet.push("&bn=" + file.dht[i]);
						else
							magnet.push("&dht=" + file.dht[i]);
					}
				}
				if (file.collection){
					for (var i=0; i < file.collection.length; i++){
						if (amp) magnet.push("&"); else amp = true;
						magnet.push("mt=")
						magnet.push(encodeURIComponent(file.collection[i]))
					}
				}
				if (file.hash_list && file.hash_list.ed2k){
					if (amp) magnet.push("&"); else amp = true;
					magnet.push("x.ed2k.p=")
					magnet.push(file.hash_list.ed2k.join(":"))
				}
				
				append_xurls(magnet, amp, file);
				
				if ( magnet.length > 1 )
					return magnet.join("");
			}
			
			function set_links(class_name, href, download){
				if (href){
					var links = document.getElementsByClassName(class_name)
					for (var i=0; i < links.length; i++)
					{
						links[i].setAttribute("href", href)
						if (download)
							links[i].setAttribute("download", download)
					}
				}
			}
			
			function base32_to_hex(base32){
				// http://tools.ietf.org/html/rfc4648
				if (!base32) return "";
				var number = 0
				var bit_pos = 0
				var detector = /[2-7a-z]/gmi
				var hex_str = []
				base32.replace(detector, function(letter){
					var val = parseInt(letter, 36);

					if (val <= 7)
						val += 24;
					else
						val -= 10;
					
					number = ((number << 5) | val) & 255
					bit_pos += 5
					
					for (; bit_pos >= 4;){
						bit_pos -= 4
						var hex_num = (number >> bit_pos) & 15
						hex_str.push(hex_num.toString(16))
					}
				})
				
				return hex_str.join("");
			}
			
			function hex_to_base58(hex)
			{
				if (!hex) return "";
				var number = 0;
				var hex_count = 0;
				var detector = /[a-f0-9]/gmi;
				var base58_int = [0];
				var base58_str = "";
				var base58_alph = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
				var leading_zeros = true;
				hex.replace(detector, function(letter){
					var val = parseInt(letter, 16);
					
					if ( leading_zeros && val == 0 ){
						if ( hex_count++ )
						{
							base58_str += base58_alph[0];
							hex_count = 0;
						}
					}
					else if( leading_zeros )
						leading_zeros = false;
					
					
					for (var i = 0; i < base58_int.length; i++ )
					{
						val += base58_int[i] << 4;
						base58_int[i] = val % 58;
						val = ( val / 58 ) | 0;
					}
					
					while (val > 0)
					{
						base58_int.push( val % 58 );
						val = ( val / 58 ) | 0;
					}
				});
				
				for ( var i = base58_int.length - 1; i >= 0; --i )
					base58_str += base58_alph[base58_int[i]];
				
				return base58_str;
			}
			
			function hex_to_base32(hex){
				if (!hex) return "";
				var number = 0
				var bit_pos = 0
				var detector = /[a-f0-9]/gmi
				var base32_str = []
				hex.replace(detector, function(letter){
					var val = parseInt(letter, 16);
					number = ((number << 4) | val) & 255
					bit_pos += 4
					
					for (; bit_pos >= 5;){
						bit_pos -= 5
						var base32_num = (number >> bit_pos) & 31
						
						if (base32_num < 26)
							base32_num += 10;
						else
							base32_num -= 24;
							
						base32_str.push(base32_num.toString(36))
					}
				})
				
				return base32_str.join("");
			}

			/* https://habrahabr.ru/post/118171/ */
			function parse_ed2k_parts(params, sources, file)
			{
				if (params){
					var params_re = /([a-z])=([^\|]+)\|/gmi
					while (p = params_re.exec(params))
					{
						switch(p[1])
						{
							case "h":
								(file.hash = file.hash || {}).aich = p[2];
								if (!file.hash.sha1 && file.size && file.size <= 184320)
									set_sha1(p[2], file);
								break;
							case "s":
								(file.url = file.url || []).push(try_decode(p[2]));
								break;
							case "p":
								(file.hash_list = file.hash_list || {}).ed2k = p[2].split(":");
								break;
							case "f":
								(file.collection = file.collection || []).push(try_decode(p[2]));
								break;
						}
					}
				}

				if (sources){
					file.xurl = file.xurl || [];
					sources.split(",").map(
						(source)=>file.xurl.push("ed2kftp://"+source+"/"+file.hash.ed2k+"/"+file.size+"/")
					)
				}
			}
			
			function parse_text(text){
				var ere = /ed2k:\/\/\|file\|([^\|]+)\|([0-9]+)\|([a-z0-9]+)\|(([a-z]=[^\|]+\|)*)(\/\|sources,([^\|]+)\|){0,1}\//gmi
				var mre = /[^\s]*magnet:\?([^\s]+)/gmi
				var ure = /udp:\/\/[^\s#]*\/([^\s\/&:#?]*)[&?]?[^\s\/#]*/gmi
				var hre = /https?:\/\/[^\s#]*\/([^\s\/&:#?]*)[&?]?[^\s\/#]*/gmi
				var dre = /dchub:\/\/[\S]+/gmi
				var urnre = /(urn:([a-z0-9\/\.]+:)*)([^&\s]+)/gmi
				var ipfshre = /(zb2rh|Qm)[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{44}/gm
				var file = {}
				text.replace(ere, function(all, name, size, hash, params, sources){
					file.name = try_decode(name);
					file.size = size;
					(file.hash = file.hash || {}).ed2k = hash;
					parse_ed2k_parts(arguments[4], arguments[7], file);
					return "";
				}).replace(mre, function (all, params){
					parse_magnet(params, file);
					return "";
				}).replace(ure, function (url, name){
					name = try_decode(name);
					if ( name == "announce" || name == "announce.php" ){
						(file.trackers = file.trackers || []).push(url);
						return ""
					}
				}).replace(hre, function (url, name){
					name = try_decode(name);
					if ( name && name.length > 0 ){
						var torrent_url = name.indexOf(".torrent");
						if ( !file.name || file.name.indexOf(".torrent") < file.name.length - 8 )
							if ( torrent_url > 0 && name.length - 8 == torrent_url ){
								(file.torrent_file_url = file.torrent_file_url || []).push(url);
								return ""
							}
							
						if ( name == "announce" || name == "announce.php" ){
							(file.trackers = file.trackers || []).push(url);
							return ""
						}
							
						if (!file.name) file.name = name;
					}
					
					(file.url = file.url || []).push(url)
					detect_ipfs_hash(url, file)
					return "";
				}).replace(dre, function (xurl){
					(file.xurl = file.xurl || []).push(xurl)
					return "";
				}).replace(urnre, function (all, urn_name, _, urn_data){
					console.log(urn_name, urn_data);
					parse_urn(urn_name, urn_data, file);
					return "";
				}).replace(ipfshre, function (ipfs){
					console.log(ipfs);
					(file.hash = file.hash || {}).ipfs = ipfs;
					return "";
				});
				return file
			}
			
			function make_link(part, hash, part2){
				if (hash) return [part, hash, part2].join("")
			}
			
			function raw_length(encodedURI){
				var count = 0;
				var index = 0;
				for ( index = encodedURI.indexOf("%");
					  index >= 0;
					  index = encodedURI.indexOf("%", index+1) )
					++count;
				return encodedURI.length - count * 2;
			}
			
			function push_string(string, to_list){
				to_list.push(raw_length(string));
				to_list.push(":");
				to_list.push(string);
			}
			
			function make_micro_torrent(file){
				if (file.name && file.size && file.hash && file.hash.sha1){
					var torrent = ["data:application/x-bittorrent;,d"]
					if (file.trackers && file.trackers.length>0){
						torrent.push("8:announce")
						push_string(file.trackers[0], torrent)
						if (file.trackers.length>1){
							torrent.push("13:announce-listl")
							for (var i = 1; file.trackers.length>i; i++){
								var tracker = encodeURIComponent(decodeURIComponent(file.trackers[i]))
								push_string(tracker, torrent)
							}
							torrent.push("e")
						}
					}
					torrent.push("4:infod")
					torrent.push("6:length")
					torrent.push("i")
					torrent.push(file.size)
					torrent.push("e")
					torrent.push("4:name")
					var name = encodeURIComponent(file.name)
					push_string(name, torrent)
					torrent.push("12:piece%20length")
					torrent.push("i")
					torrent.push(file.size < 16384 ? 16384 : file.size)
					torrent.push("e")
					torrent.push("6:pieces")
					var sha1 = file.hash.sha1
					if (sha1.length < 40)
						sha1 = base32_to_hex(sha1);
					sha1 = sha1.replace(/[0-9A-Fa-f]{2}/g,"%$&")
					push_string(sha1, torrent)
					torrent.push("4:sha1")
					push_string(sha1, torrent)
					torrent.push("e")
					if (file.dht && file.dht.length>0){
						torrent.push("5:nodesl")
						for (var i = 0; file.dht.length>i; i++){
							torrent.push("l")
							var port_start = file.dht[i].lastIndexOf(":")
							if (port_start > 0){
								var port = file.dht[i].substring(port_start + 1)
								port = parseInt(port)
								if (port > 0){
									var address = file.dht[i].substring(0, port_start)
									address = encodeURIComponent(decodeURIComponent(address))
									push_string(address, torrent)
									torrent.push("i" + port + "e")
									torrent.push("e")
								}
							}

						}
						torrent.push("e")
					}
					if (file.url && file.url.length>0){
						torrent.push("8:url-listl")
						for (var i = 0; file.url.length>i; i++){
							var url = encodeURIComponent(decodeURIComponent(file.url[i]))
							push_string(url, torrent)
						}
						torrent.push("e")
					}
					torrent.push("e")
					return torrent.join("")
				}
			}
			
			
			function make_merkle_torrent(file)
			{
				var root_hash;
				var aich = false;
				
				if (file.hash && file.size)
				{
					if (file.hash.aich && file.size > 180 * 1024 && file.size <= 180 * 1024 * 52)
					{
						aich = true;
						root_hash = file.hash.aich;
					}
					else if(file.hash.sha1)
						root_hash = file.hash.sha1;
					else
						return;
				}
				else
					return;
						
				if (root_hash.length < 40)
					root_hash = base32_to_hex(root_hash);
				root_hash = root_hash.replace(/[0-9A-Fa-f]{2}/g,"%$&");
				
				if (file.name && file.size)
				{
					var torrent = ["data:application/x-bittorrent;,d"]
					if (file.trackers && file.trackers.length>0)
					{
						torrent.push("8:announce");
						push_string(file.trackers[0], torrent);
						if (file.trackers.length>1)
						{
							torrent.push("13:announce-listl");
							for (var i = 1; file.trackers.length>i; i++)
							{
								var tracker = encodeURIComponent(decodeURIComponent(file.trackers[i]));
								push_string(tracker, torrent);
							}
							torrent.push("e");
						}
					}
					torrent.push("4:infod");
					torrent.push("6:length");
					torrent.push("i");
					torrent.push(file.size);
					torrent.push("e");
					torrent.push("4:name");
					var name = encodeURIComponent(file.name);
					push_string(name, torrent);
					torrent.push("12:piece%20length");
					torrent.push("i");
					if ( aich )
						torrent.push(180 * 1024);
					else
					{
						if ( file.size <= 64 * 1024 )
							torrent.push(64 * 1024);
						else
							torrent.push(file.size);
					}
					torrent.push("e");
					if ( !aich )
					{
						torrent.push("6:pieces");
						push_string(root_hash, torrent);
					}

					torrent.push("9:root%20hash");
					push_string(root_hash, torrent);
					
					if ( !aich )
					{
						torrent.push("4:sha1");
						push_string(root_hash, torrent);
					}
					torrent.push("e");
					if (file.dht && file.dht.length>0)
					{
						torrent.push("5:nodesl");
						for (var i = 0; file.dht.length>i; i++)
						{
							torrent.push("l");
							var port_start = file.dht[i].lastIndexOf(":");
							if (port_start > 0)
							{
								var port = file.dht[i].substring(port_start + 1);
								port = parseInt(port);
								if (port > 0)
								{
									var address = file.dht[i].substring(0, port_start);
									address = encodeURIComponent(decodeURIComponent(address));
									push_string(address, torrent);
									torrent.push("i" + port + "e");
									torrent.push("e");
								}
							}

						}
						torrent.push("e");
					}
					if (file.url && file.url.length>0)
					{
						torrent.push("8:url-listl");
						for (var i = 0; file.url.length>i; i++)
						{
							var url = encodeURIComponent(decodeURIComponent(file.url[i]));
							push_string(url, torrent);
						}
						torrent.push("e");
					}
					torrent.push("e");
					return torrent.join("");
				}
			}
			
			function set_urls(urls, container_id, urls_class, file_name){
				if (!urls) return;
				var container = document.getElementById(container_id)
				var new_container = document.createElement(container.tagName)
				for (var i=0; i < urls.length; i++){
					var link =  document.createElement("a")
					var name = document.createTextNode(try_decode(urls[i]))
					link.href = urls[i]
					link.className = urls_class
					if (typeof(file_name) == "string" && file_name.length > 0)
					{
						switch (link.protocol)
						{
							case "ftp:":
							case "http:":
							case "https:":
							case "data:":
								link.download = file_name;
						}
					}
					link.appendChild(name)
					new_container.appendChild(link)
				}
				container.parentNode.replaceChild(new_container, container)
				new_container.id = container.id
				new_container.className = container.className
				
			}
			
			function to_urns(file){
				if (!file.hash)
					return;
					
				var urn_list = [];
				
				if ( file.hash.btih ) 
					urn_list.push("urn:btih:" + file.hash.btih);
					
				if (file.hash.sha1 && file.hash.tree_tiger){
					var sha1 = file.hash.sha1;
					if (sha1.length == 40)
						sha1 = hex_to_base32(sha1);
						
					urn_list.push("urn:bitprint:"+
					 sha1+"."+file.hash.tree_tiger
					)
				}
				
				if(file.hash.sha1){
					urn_list.push("urn:sha1:"+file.hash.sha1)
				}
				
				if(file.hash.tree_tiger){
					urn_list.push("urn:tree:tiger:"+file.hash.tree_tiger)
				}
				
				if (file.hash.ed2k)
					urn_list.push("urn:ed2k:"+file.hash.ed2k);
				
				if (file.hash.aich)
					urn_list.push("urn:aich:"+file.hash.aich);
				
				if (file.hash.sha256)
					urn_list.push("urn:sha256:"+file.hash.sha256);
					
				if (file.hash.ipfs)
					urn_list.push("urn:ipfs:"+file.hash.ipfs);
					
				if (file.hash.md4)
					urn_list.push("urn:md4:"+file.hash.md4);
					
				if (file.hash.md5)
					urn_list.push("urn:md5:"+file.hash.md5);
				
				if (file.urns)
					file.urns.map(function(urn){
						urn_list.push(urn)
					});
				
				if ( urn_list.length > 0 )
					return urn_list;
			}
			
			function add_btc(file){
				var xurl_list = [];
				if (file.peers && file.hash && file.hash.btih)
					for (var i=0; i < file.peers.length; i++)
						xurl_list.push("btc://" + file.peers[i] + "//" + file.hash.btih );
						
				if (file.xurl)
					for (var i=0; i < file.xurl.length; i++)
						xurl_list.push(file.xurl[i]);

				if ( xurl_list.length > 0 )
					return xurl_list;
			}

			function set_file(file){
				if(file){
					document.getElementById("file-name").textContent = file.name
					document.getElementById("file-size").textContent = file.size
					document.title = (file.name || "") + " " + (title || "")
					set_links("torrent_magnet", torrent_magnet(file))
					set_links("dc_magnet", dc_magnet(file))
					set_links("shareaza_magnet", full_magnet(file, true))
					set_links("ed2k_link", ed2k_link(file))
					set_links("micro_torrent", make_micro_torrent(file), file.name + ".micro.torrent")
					set_links("merkle_torrent", make_merkle_torrent(file), file.name + ".merkle.torrent");
					if (file.hash && file.hash.ipfs)
							set_links("hash-archive", 
								make_link("https://hash-archive.org/sources/", file.hash.ipfs))
								
					if (file.url && file.url.length)
							set_links("hash-archive", 
								make_link("https://hash-archive.org/history/", file.url[0]))
								
					
					if (file.hash){
					
						if (file.hash.sha1)
							set_links("virus_check", 
								make_link("http://www.virustotal.com/latest-report.html?resource=", file.hash.sha1.length < 40 ? base32_to_hex(file.hash.sha1): file.hash.sha1))
						else if (file.hash.md5)
							set_links("virus_check", 
								make_link("http://www.virustotal.com/latest-report.html?resource=", file.hash.md5))
						else if (file.hash.sha256)
							set_links("virus_check", 
								make_link("http://www.virustotal.com/latest-report.html?resource=", file.hash.sha256))
					
						set_links("dc_search", 
									make_link("http://dc.proisk.com?tiger=", file.hash.tree_tiger))
	/*					set_links("bitzi_lookup", 
									make_link("http://bitzi.com/lookup/", 
										file.hash.bitprint 
										|| file.hash.sha1 			
										||	(file.hash.tree_tiger?["tree:tiger:",file.hash.tree_tiger].join(""):false)
										||	(file.hash.ed2k?["ed2k:",file.hash.ed2k].join(""):false)					)
								)
	*/					if (file.hash.btih){
							set_links("ikwyd_search", 
										make_link("https://iknowwhatyoudownload.com/torrent/?infohash=", file.hash.btih))
							set_links("btdigg_search", 
										make_link("https://btdig.com/search?info_hash=", file.hash.btih))
							set_links("torcache_torrent", 
										make_link("https://itorrents.org/torrent/", file.hash.btih.toUpperCase()))
							set_links("instant_io", 
										make_link("https://instant.io/#", torrent_magnet(file, true)))
						}
						if (file.hash.ed2k)
							set_links("ed2k-stats", 
								make_link("https://ed2k.shortypower.org/?hash=", file.hash.ed2k))
						
						if (file.hash.ipfs)
						{
							set_links("ipfs-link", 
								make_link("https://gateway.ipfs.io/ipfs/", file.hash.ipfs));
								
							set_links("ipfs-link-http-local", 
								make_link("https://127.0.0.1:8080/ipfs/", file.hash.ipfs));
							
							set_links("ipfs-link-https-local", 
								make_link("https://127.0.0.1:8443/ipfs/", file.hash.ipfs));
						}

						if (file.hash.sha1)
							set_links("hash-archive", 
								make_link("https://hash-archive.org/sources/magnet:?xt=urn:sha1:", file.hash.sha1.length < 40 ? base32_to_hex(file.hash.sha1): file.hash.sha1))
						else if (file.hash.md5)
							set_links("hash-archive", 
								make_link("https://hash-archive.org/sources/magnet:?xt=urn:md5:", file.hash.md5))	
						else if (file.hash.sha256)
							set_links("hash-archive", 
								make_link("https://hash-archive.org/sources/magnet:?xt=urn:sha256:", file.hash.sha256))		
								
					}
					set_urls(file.url,"direct_links", "url", file.name)
					set_urls(add_btc(file),"p2p_links", "xurl")
					set_urls(file.collection,"p2p_collections", "collection")
					set_urls(file.torrent_file_url,"torrent_file_urls", "torrent_file_url")
					set_urls(file.description_url,"description_links", "durl")
					set_urls(file.trackers,"tracker_links", "turl")
					set_urls(to_urns(file),"urn_links", "urn")
				}

				
				var hash = window.location.hash
				if (hash && hash.length > 1){
					if (hash && (hash.indexOf("#") != 0)){
						hash = "#" + hash
					}else if(!hash){
						hash = "#magnet:?"
					}
					
					set_links("full_link", hash)
					set_links("short_link", "/" + hash)
					set_links("short_msg_link_private", "/" + hash.replace("#magnet:?", "#magnet?"))
					set_links("short_msg_link", "/" + hash.replace("#magnet:?", "magnet?"))
					set_links("shorter_link", hash.replace("#magnet:?", "http://magn.tk#magnet:?"))
					set_links("magic_link", hash.replace("#magnet:?", "http://magnet-xt-urn.tk#magnet:?"))
					set_links("shorter_ru_link", hash.replace("#magnet:?", "http://магнит.tk#magnet:?"))
					set_links("shortest_ru_link", hash.replace("#magnet:?", "http://м.tk#magnet:?"))
				}
			}
			
			var title = document.title
			var hash = document.location.hash
			
			if(hash.substr(1,6) == "urn%3A")
				hash = try_decode(hash);
			
			
			if(hash.substr(1,4) == "urn:")
			{
				hash = "#magnet:?xt=" + hash.substr(1);
				document.location.hash = hash;
			}
			
			if(hash.substr(1,12) == "magnet%3A%3F")
				hash = try_decode(hash);
				
			if(hash.substr(1,7) == "magnet?")
			{
				hash = "#magnet:?" + hash.substr(8);
				document.location.hash = hash;
			}
				
			if(hash.substr(1,2) == ":?")
			{
				hash = "#magnet" + hash.substr(1);
				document.location.hash = hash;
			}
			
			if(hash.substr(1,1) == "?")
			{
				hash = "#magnet:" + hash.substr(1);
				document.location.hash = hash;
			}
			
			if(hash.length <= 1 && document.referrer.indexOf("magnet:?") > 0)
			{
				hash = "#" + document.referrer.substr(document.referrer.indexOf("magnet:?"));
				document.location.hash = hash;
			}
			
			if(hash.length <= 1 && document.referrer.indexOf("magnet%3A%3F") > 0)
			{
				hash = "#" + document.referrer.substr(document.referrer.indexOf("magnet%3A%3F"));
				hash = try_decode(hash);
				document.location.hash = hash;
			}

			var start = hash.indexOf("magnet:?")
			if (start > 0) {
				var magnet = hash.substr(start)
				document.getElementById("magnet_mix").value = magnet
				document.getElementById("link").href = magnet
				file = parse_magnet(magnet.substr(8))
				set_file(file)
			}
			
			function make_magnet_on_click(){
				var magnet_mix = document.getElementById("magnet_mix")
				var file = parse_text(magnet_mix.value)
				var freebase = document.getElementById("freebase_be")
				if (freebase.checked && file.hash && file.hash.sha1){
					if (!file.xurl)
						file.xurl = [];
					file.xurl.push("http://cache.freebase.be/"+file.hash.sha1.toLowerCase());
					freebase.checked = false;
				}
				var ipfs_io = document.getElementById("ipfs_io")
				if (ipfs_io.checked && file.hash && file.hash.ipfs)
				{
					if (!file.url)
						file.url = [];
					file.url.push("http://gateway.ipfs.io/ipfs/"+file.hash.ipfs)
					file.url.push("http://127.0.0.1:8080/ipfs/"+file.hash.ipfs)
					ipfs_io.checked = false;
				}
				var magnet = full_magnet(file)
				document.location.hash = magnet
				document.getElementById("link").href = magnet
				magnet_mix.value = magnet
				set_file(file)
				console.log(file)
			}
			
			function example_on_click(){
				document.getElementById("magnet_mix").value = [
				"magnet:?xl=41412&xt=urn:tree:tiger:maxvzvawiidymg3uj5ihzijou35il4wzcqicpoa&dn=Magnet-%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B0.txt",
				
				"urn:btih:953edbe75de612bc966194d2ee60099b3bc1a1aa",

				"ed2k://|file|Magnet-%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B0.txt|41412|a0a927b6f044eb27945295d1fc8366c9|h=2zder3zislgddpwa6zxj7xh7fpqlvi7p|/",
				
				"http://ipfs.io/ipfs/zb2rhe143L6sgu2Nba4TZgFMdPidGMA6hmWhK9wLUoVGWYsR7",
				
				"dchub://allavtovo.ru",
				"magnet:?x.do=https%3A%2F%2Fru.wikipedia.org%2Fwiki%2FMagnet-%25D1%2581%25D1%2581%25D1%258B%25D0%25BB%25D0%25BA%25D0%25B0",
				
				"https://ipfs.io/ipfs/QmfQCxNW9r2974xR5dXopXfQqsEvgexhza6aQgqTGL7Yh3/Magnet-ссылка.txt",
				
				"https://ipfs.io/ipfs/QmfQCxNW9r2974xR5dXopXfQqsEvgexhza6aQgqTGL7Yh3/Magnet-ссылка.txt.torrent",
				
				"http://mgtracker.org:6969/announce",
				
				"udp://tracker.pirateparty.gr:6969/announce"
				
				].join("\n\n")
			}


			if (window.location.hash.substr(1,8) == "magnet:?"){
				setTimeout(function() {window.location.replace(window.location.hash.substr(1))}, 0);
			}
		</script>
		
		<p>Данная страничка использует информацию переданную ей в url. Таким образом на сайте не хранится никакая иформация о файлах на которые эта страничка может ссылаться.</p>
		
		<p>Вы можете скопировать данную страницу или её чась и разместить у себя на сайте. Также вы можете использовать данные любым другим образом.</p>
		
		<p>
			<a href="" download>Сохранить страничку</a>
		</p>
		<p>
			Данная кнопка нужна только в случае если вы эту страницу используете как конвертер магнет ссылок и будете самостоятельно копировать нужный вид магнет ссылки в P2P клиент.
			<button onclick="register_magnet_handler()">Зарегистрировать как обработчик магнет ссылок(Register magnet handler)</button>
			
			<button onclick="register_urn_handler()">Зарегистрировать как обработчик URN ссылок(Register URN handler)</button> [? <a href="https://ru.wikipedia.org/wiki/URN">RU</a>|<a href="https://en.wikipedia.org/wiki/URN">EN</a>]
		</p>
		<p>
			Значок для обозначения магнита (Icon for magnet):
			<img src="../magnet-uri-logo/magnet-uri-logo-mini.svg"/><a href="https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo-mini.svg">https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo-mini.svg</a></br>
			Вы можете свободно использовать его для обозначения магнита на просторах интернета и вне его.
		</p>
		<p>
			Есть другие версии:</br>
			<a href="https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo.svg">https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo.svg</a></br>
			<a href="https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo-fullscreen.svg">https://ivan386.github.io/magnet-uri-logo/magnet-uri-logo-fullscreen.svg</a>
		</p>
		<script>document.body.classList.add("script")</script>
		
		<link rel="stylesheet" href="http://127.0.0.1:8080/ipfs/QmPLcw99QyegedCQRHxbQ71nqWrPyxFNivdNSS4R8zsyTc/ipfs-link-http-local.css" 
		 integrity="sha384-fmwCYLopBCHt+WF80OS1gA9L+yUZ1Xt9Rwbip4d6dqMrDnK/j2vqnZ+7trhy5AFP" 
		 crossorigin="anonymous" />
		<link rel="stylesheet" href="https://127.0.0.1:8443/ipfs/QmPLcw99QyegedCQRHxbQ71nqWrPyxFNivdNSS4R8zsyTc/ipfs-link-https-local.css" 
		 integrity="sha384-3W0ZycF7EqopqyicPPoZ5u41sFonkUjPQmEQyxxEiMSpu9Ig54zKE8MSLjy3MI2i" 
		 crossorigin="anonymous" />
	</body>
</html>
